{"version":3,"sources":["redux/reducers/additionProblem.js","redux/actionTypes.js","redux/reducers/index.js","components/Home.js","redux/actions.js","serviceWorker.js","index.js"],"names":["initialState","firstNum","secondNum","answerResponse","showAnswerResponse","showNewExerciseButton","getRandomInt","min","max","Math","ceil","floor","random","additionProblem","state","action","type","answer","console","log","parseInt","combineReducers","useStyles","makeStyles","theme","exercise","backgroundColor","palette","background","paper","form","margin","spacing","flexDirection","alignItems","justifyContent","submit","connect","additionProblemInitialize","additionProblemCheckAnswer","classes","React","useState","setAnswer","useEffect","handleProblemInitialize","ansValid","value","isNaN","Number","Container","component","maxWidth","className","CssBaseline","Typography","variant","align","gutterBottom","noValidate","onSubmit","event","preventDefault","autoComplete","TextField","id","label","fullWidth","inputProps","style","textAlign","fontSize","onChange","target","error","helperText","Button","color","disabled","length","onClick","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4d142c13.chunk.js","sourcesContent":["import {\n  ADDITION_PROBLEM_INITIALIZE,\n  ADDITION_PROBLEM_CHECK_ANSWER,\n} from '../actionTypes';\n\nconst initialState = {\n  firstNum: 0,\n  secondNum: 0,\n  answerResponse: '',\n  showAnswerResponse: false,\n  showNewExerciseButton: false,\n};\n\nconst minNum = 100;\nconst maxNum = 1000;\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nconst additionProblem = (state = initialState, action) => {\n  switch (action.type) {\n    case ADDITION_PROBLEM_INITIALIZE: {\n      const firstNum = getRandomInt(minNum, maxNum);\n      const secondNum = getRandomInt(minNum, maxNum);\n      return {\n        ...initialState,\n        firstNum,\n        secondNum,\n      };\n    }\n    case ADDITION_PROBLEM_CHECK_ANSWER: {\n      const { answer } = action;\n      console.log(answer);\n      console.log(answer === state.firstNum + state.secondNum);\n      console.log(parseInt(answer) === state.firstNum + state.secondNum);\n      \n      if (parseInt(answer) === state.firstNum + state.secondNum) {\n        return {\n          ...state,\n          answerResponse: 'Yay! ' + answer + ' is the correct answer.',\n          showAnswerResponse: true,\n          showNewExerciseButton: true,\n        }\n      }\n      else {\n        return {\n          ...state,\n          answerResponse: 'No. ' + answer + ' is not the right answer.',\n          showAnswerResponse: true,\n          showNewExerciseButton: false,\n        }\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default additionProblem;","export const ADDITION_PROBLEM_INITIALIZE = 'ADDITION_PROBLEM_INITIALIZE';\nexport const ADDITION_PROBLEM_CHECK_ANSWER = 'ADDITION_PROBLEM_CHECK_ANSWER';\n","import { combineReducers } from 'redux';\nimport additionProblem from './additionProblem';\n\nexport default combineReducers({\n  additionProblem,\n});","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { additionProblemInitialize, additionProblemCheckAnswer } from '../redux/actions';\nimport { TextField, Button } from '@material-ui/core';\n\n\nconst useStyles = makeStyles(theme => ({\n  exercise: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  form : {\n    margin: theme.spacing(1),\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\nconst Home = ({ additionProblem, additionProblemInitialize, additionProblemCheckAnswer }) => {\n  const classes = useStyles();\n  const [answer, setAnswer] = React.useState('');\n\n  React.useEffect(() => {\n    additionProblemInitialize();\n  }, [additionProblemInitialize])\n\n\n  const handleAnswerChange = event => {\n    setAnswer(event.target.value);\n  }\n\n  const handleAnswerSubmit = event => {\n    event.preventDefault();\n    additionProblemCheckAnswer(answer);\n  }\n  \n  const handleProblemInitialize = () => {\n    setAnswer('');\n    additionProblemInitialize();\n  }\n\n  // Credit: https://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript\n  const ansValid = value => {\n    if (value === '') {\n      return true;\n    }\n    else {\n      return !isNaN(value) && \n        parseInt(value) === Number(value) && \n        !isNaN(parseInt(value, 10));\n    }\n  }\n\n  const showNewExerciseButton = () => {\n    if (additionProblem.showNewExerciseButton) {\n      return (\n        <Button\n          type='submit'\n          fullWidth\n          variant='contained'\n          color='primary'\n          className={classes.submit}\n          onClick={handleProblemInitialize}\n          >\n            New Exercise\n        </Button>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  const showAnswerResponse = () => {\n    if (additionProblem.showAnswerResponse) {\n      return (\n      <Typography variant='h6' align='center'>\n          {additionProblem.answerResponse}\n      </Typography>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  return (\n    <Container component='main' maxWidth='xs'>\n    <div className={classes.exercise}>\n      <CssBaseline />\n      <Typography variant=\"h6\" align=\"center\" gutterBottom>\n        Answer please!\n      </Typography>\n      <Typography variant='h2' align='center'>\n          {additionProblem.firstNum} + {additionProblem.secondNum} = ?\n      </Typography>\n    </div>\n    <form className={classes.form} noValidate onSubmit={handleAnswerSubmit} autoComplete='off'>\n      <TextField\n        id='answer'\n        label='Enter your answer here'\n        margin='normal'\n        fullWidth\n        variant='outlined'\n        inputProps={{\n          style: {\n            textAlign: 'right',\n            fontSize: 50,\n          }\n        }}\n        value={answer}\n        onChange={handleAnswerChange}\n        error={!ansValid(answer)}\n        helperText={ansValid(answer) ? null : 'Please enter an integer'}\n        />\n      <Button\n        type='submit'\n        fullWidth\n        variant='contained'\n        color='primary'\n        className={classes.submit}\n        disabled = {answer.length === 0 || !ansValid(answer)}\n        >\n          Check Answer\n      </Button>\n    </form>\n    {showAnswerResponse()}\n    {showNewExerciseButton()}\n    </Container>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    additionProblem: state.additionProblem,\n   };\n};\n\nexport default connect(\n  mapStateToProps,\n  { additionProblemInitialize, additionProblemCheckAnswer }\n)(Home);\n","import * as atypes from './actionTypes';\n\nexport const additionProblemInitialize = () => ({\n  type: atypes.ADDITION_PROBLEM_INITIALIZE,\n});\n\nexport const additionProblemCheckAnswer = (answer) => ({\n  type: atypes.ADDITION_PROBLEM_CHECK_ANSWER,\n  answer,\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './redux/reducers'\nimport Home from './components/Home';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Home />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}